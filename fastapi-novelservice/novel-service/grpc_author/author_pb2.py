# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: author.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0c\x61uthor.proto\"\x1e\n\x10GetAuthorRequest\x12\n\n\x02id\x18\x01 \x01(\x05\"O\n\nAuthorGrpc\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0f\n\x07jp_name\x18\x02 \x01(\t\x12\x13\n\x0bromaji_name\x18\x03 \x01(\t\x12\x0f\n\x07twitter\x18\x04 \x01(\t2<\n\x0bGrpcAuthors\x12-\n\tGetAuthor\x12\x11.GetAuthorRequest\x1a\x0b.AuthorGrpc\"\x00\x42\x10\xaa\x02\rAuthorServiceb\x06proto3')



_GETAUTHORREQUEST = DESCRIPTOR.message_types_by_name['GetAuthorRequest']
_AUTHORGRPC = DESCRIPTOR.message_types_by_name['AuthorGrpc']
GetAuthorRequest = _reflection.GeneratedProtocolMessageType('GetAuthorRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETAUTHORREQUEST,
  '__module__' : 'author_pb2'
  # @@protoc_insertion_point(class_scope:GetAuthorRequest)
  })
_sym_db.RegisterMessage(GetAuthorRequest)

AuthorGrpc = _reflection.GeneratedProtocolMessageType('AuthorGrpc', (_message.Message,), {
  'DESCRIPTOR' : _AUTHORGRPC,
  '__module__' : 'author_pb2'
  # @@protoc_insertion_point(class_scope:AuthorGrpc)
  })
_sym_db.RegisterMessage(AuthorGrpc)

_GRPCAUTHORS = DESCRIPTOR.services_by_name['GrpcAuthors']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\252\002\rAuthorService'
  _GETAUTHORREQUEST._serialized_start=16
  _GETAUTHORREQUEST._serialized_end=46
  _AUTHORGRPC._serialized_start=48
  _AUTHORGRPC._serialized_end=127
  _GRPCAUTHORS._serialized_start=129
  _GRPCAUTHORS._serialized_end=189
# @@protoc_insertion_point(module_scope)
